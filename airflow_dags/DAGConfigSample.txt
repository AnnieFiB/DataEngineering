airflow users create --username ehiughele --firstname Ehi --lastname Ughele --role Admin --email ehi@10alytics.org


**DAG Imports
import airflow
from airflow import DAG
from datetime import datetime, timedelta
from airflow.operators.bash_operator import BashOperator
from airflow.operators.postgres_operator import PostgresOperator
from airflow.operators.python_operator import PythonOperator
from airflow.utils.dates import days_ago

**DEFAULT ARGUMENTS
default_args = {
    'owner': 'airflow',                     # Who is responsible for the DAG
    'depends_on_past': False,               # Don't wait on previous runs
    'start_date': airflow.utils.dates.days_ago(1),  # When the DAG should start running
    'email': ['your_email@example.com'],    # Alert emails
    'email_on_failure': False,              # Set to True if you want email alerts
    'email_on_retry': False,
    'retries': 1,                           # Number of retries
    'retry_delay': timedelta(minutes=5),    # Wait between retries
    'catchup': False                        # Skip backfilling
}

**PASS DAG
dag = DAG(
    airflow_data_pipeline_tutorial',
    default_args=default_args,
    description='My sample DAG',
    schedule_interval='@daily',  # or a cron expression
    template_searchpath='/usr/local/airflow/include/sqldb/'
    catchup=False
    )


**DEFINE TASKS
t1=PostgrsOperator(
	task_id = 'create_table'
	postgres_conn_id = 'my_postgres_connection",
	sql = 'CREATE TABLE my_table(my_column varchar(10);',
	dag=dag

t2=BashOperator(
	task_id = 'bash_hello_world'
	bash_command = 'echi "Hello World",
	dag=dag



**SET TASK DEPENDENCIES
- downstream function: t1.set_downstream(t2)
	t2.set_upstream(t1)
	t1.set_downstream([t2,t3]) ---for parallel dependencies
or
- dependencies mapping: t1 >> t2 (left to right assignment)
	t2 << t1 (right to left assignment)
	t1 >> [t2,t3] or [t2,t3] << t1 --- for parallel dependencies


Docker(a Linux env) to be used to house airflow or Linux terminal(WSL)
































